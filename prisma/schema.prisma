// This is the Prisma schema file for EcoHub

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  bio           String?
  preferences   String?   // Stored as JSON string
  
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  comments      Comment[]
  likes         Like[]
  topics        Topic[]     // Added for forums
  posts         Post[]      // Added for forums
  postComments  PostComment[] // Added for forums
  postLikes     PostLike[]  // Added for forums
  topicMembers  TopicMember[] // Added for user's topic memberships
  
  // Added for follower system
  followers     Follower[] @relation("UserFollowers")
  following     Follower[] @relation("UserFollowing")
  
  // Added for messaging system
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  
  // Added for volunteer opportunities
  opportunities     VolunteerOpportunity[] @relation("OrganizedOpportunities")
  participations    VolunteerParticipant[] @relation("Participations")
  opportunityComments OpportunityComment[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Follower relationship model
model Follower {
  id          String   @id @default(cuid())
  followerId  String   // User who is following
  followingId String   // User who is being followed
  
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())
  
  @@unique([followerId, followingId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String    @id @default(cuid())
  title       String
  description String
  content     String?
  imageUrl    String?
  fileUrl     String?
  category    String?
  tags        String?   // Comma-separated tags
  
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  comments    Comment[]
  likes       Like[]
  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Comment {
  id        String    @id @default(cuid())
  content   String
  
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId String
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Like {
  id        String    @id @default(cuid())
  
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  projectId String
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  createdAt DateTime  @default(now())
  
  @@unique([userId, projectId])
}

// Forum Models
model Topic {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  slug        String   @unique
  category    String   // Category for organizing topics
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  posts       Post[]
  members     TopicMember[] // Members who have joined this topic
  isDefault   Boolean  @default(false) // Whether this is a default topic
}

// New model for topic members
model TopicMember {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  topicId   String
  topic     Topic    @relation(fields: [topicId], references: [id])
  joinedAt  DateTime @default(now())

  @@unique([userId, topicId])
}

model Post {
  id          String        @id @default(cuid())
  title       String
  content     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  userId      String
  user        User          @relation(fields: [userId], references: [id])
  topicId     String
  topic       Topic         @relation(fields: [topicId], references: [id])
  comments    PostComment[]
  likes       PostLike[]
}

model PostComment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  parentId  String?  // For nested comments
  parent    PostComment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   PostComment[] @relation("CommentReplies")
}

model PostLike {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

// Volunteer Opportunity Models
model VolunteerOpportunity {
  id              String  @id @default(cuid())
  title           String
  description     String
  location        String
  startDate       DateTime
  endDate         DateTime?
  imageUrl        String?
  category        String  // e.g., "Conservation", "Cleanup", "Education"
  skillsRequired  String? // Comma-separated skills
  maxParticipants Int?
  
  organizerId     String
  organizer       User    @relation("OrganizedOpportunities", fields: [organizerId], references: [id], onDelete: Cascade)
  
  participants    VolunteerParticipant[]
  comments        OpportunityComment[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model VolunteerParticipant {
  id              String  @id @default(cuid())
  
  userId          String
  user            User    @relation("Participations", fields: [userId], references: [id], onDelete: Cascade)
  
  opportunityId   String
  opportunity     VolunteerOpportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  
  status          String  @default("registered") // "registered", "confirmed", "attended", "cancelled"
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([userId, opportunityId])
}

model OpportunityComment {
  id              String  @id @default(cuid())
  content         String
  
  userId          String
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  opportunityId   String
  opportunity     VolunteerOpportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  
  parentId        String? // For nested comments
  parent          OpportunityComment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies         OpportunityComment[] @relation("CommentReplies")
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Message model for direct messaging
model Message {
  id          String   @id @default(cuid())
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isRead      Boolean  @default(false)
  
  senderId    String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  
  receiverId  String
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
} 